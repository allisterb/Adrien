<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)..\..\..\lib\netstandard2.0\Humanizer.dll" #>
<#@ assembly name="$(TargetDir)Adrien.Core.dll" #>
<#@ import namespace="Adrien.Notation" #>
<#@ output extension=".cs" #>
using System.Linq.Expressions;

namespace Adrien.Notation
{
	public partial class Tensor
	{
		<#for (int i = 1; i <= 100; i++) {#>  
		public TensorExpression this[<#for (int j = 1; j < i; j++) {#>Index index<#=j#>, <#}#>Index index<#=i#>]
		{
			get
			{
				ThrowIfIndicesExceedRank(<#=i#>);
				return new TensorExpression(Expression.MakeIndex(Expression.Constant(new TensorExpression[<#for (int j = 1; j < i; j++) {#>,<#}#>] 
				<#for (int j = 1; j <= i; j++) {#>{<#}#>this<#for (int j = 1; j <= i; j++) {#>}<#}#>), null, new Expression[] {
					<#for (int j = 1; j < i; j++) {#>Expression.Parameter(typeof(int), index<#=j#>.Name), <#}#>Expression.Parameter(typeof(int), index<#=i#>.Name)}));
				
			}
			set
			{
				ThrowIfAlreadyAssiged();
				Assignment = (new IndexSet(index1), value);
			}
		}
		<#}#>
	}
}