<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)..\..\..\lib\netstandard2.0\Humanizer.dll" #>
<#@ assembly name="$(TargetDir)Adrien.Core.dll" #>
<#@ import namespace="Adrien.Notation" #>
<#@ output extension=".cs" #>
using System.Linq.Expressions;

namespace Adrien.Notation
{
	public partial class Tensor
	{
		<#for (int i = 1; i <= 8; i++) {#>  
		public TensorIndexExpression this[<#for (int j = 1; j < i; j++) {#>Index index<#=j#>, <#}#>Index index<#=i#>]
		{
			get
			{
				ThrowIfIndicesExceedRank(<#=i#>);
				return new TensorIndexExpression(Expression.ArrayAccess
					(Expression.Constant(new Tensor[<#for (int j = 1; j < i; j++) {#>,<#}#>] 
				<#for (int j = 1; j <= i; j++) {#>{<#}#>this<#for (int j = 1; j <= i; j++) {#>}<#}#>), 
				new Expression[] {
					<#for (int j = 1; j < i; j++) {#>Expression.Parameter(typeof(int), index<#=j#>.Id), 
					<#}#>Expression.Parameter(typeof(int), index<#=i#>.Id)}));
			}
			set
			{
				ThrowIfAlreadyAssiged();
				if (value.LinqExpression.NodeType == ExpressionType.Call)
                {
                    ContractionDefinition = (new IndexSet(this, <#for(int j = 1; j < i; j++){#>index<#=j#>, <#}#>index<#=i#>), value as TensorContraction);
                }
                else
                {
                    ContractionDefinition = (new IndexSet(this, <#for(int j = 1; j < i; j++){#>index<#=j#>, <#}#>index<#=i#>), Math.Sum(value));
                }
			}
		}
		<#}#>
	}
}